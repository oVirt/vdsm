# SPDX-FileCopyrightText: Red Hat, Inc.
# SPDX-License-Identifier: GPL-2.0-or-later

# Useful VDSM helpers for developers. It supplies a few shorthands for common
# developer's daily tasks. This file can be imported to one's .bashrc or
# .zshrc.

VDSM_SOURCE_DIR="${VDSM_SOURCE_DIR:-~/code/vdsm}"
RPMDIR=`rpm --eval %_rpmdir`

if grep -q 'CentOS Linux release 7' /etc/redhat-release; then
    PYTHON='python2'
else
    PYTHON='python3'
fi

_latest_version() {
    ls "$RPMDIR"/*/vdsm-python* -t -w 1 | head -1 | sed 's/.*vdsm-[a-z]*-//;s/.noarch.rpm//'
}

_latest_rpms() {
    local VERSION=$(_latest_version)
    find "$RPMDIR"/ -iname "*$VERSION*.rpm" | egrep "vdsm-[0-9]|python|common|network|client|http|jsonrpc|tests|api|hook-vmfex-dev"
}

vdsm_configure_force() {
    sudo vdsm-tool configure --force
}

vdsm_restart() {
    sudo systemctl stop vdsmd supervdsmd
    sudo systemctl start vdsmd
    sleep 3
    systemctl status vdsm-network| egrep -i "activ|failed"
    systemctl status vdsmd| egrep -i "activ|failed"
    systemctl status supervdsmd | egrep -i "activ|failed"
    }

vdsm_caps_nonsecure() {
    if [ -t 1 ]; then
        sudo vdsm-client --insecure Host getCapabilities | less
    else
        sudo vdsm-client --insecure Host getCapabilities
    fi
}

vdsm_caps() {
    if [ -t 1 ]; then
        sudo vdsm-client Host getCapabilities | less
    else
        sudo vdsm-client Host getCapabilities
    fi
}

vdsm_check() {
    pushd $VDSM_SOURCE_DIR
    ./autogen.sh --system && make check
    popd
}

vdsm_smoke() {
    vdsm_functional testSetupNetworksAddBondWithManyVlans
}

vdsm_remove() {
    sudo yum erase -y vdsm\*
    pushd $VDSM_SOURCE_DIR
    make distclean
    popd
}

vdsm_install() {
    FILES=$(_latest_rpms)
    sudo yum install -y `echo $FILES | paste -sd " "` && \
    vdsm_configure_force
}

vdsm_reinstall() {
    FILES=$(_latest_rpms)
    sudo yum reinstall -y `echo $FILES | paste -sd " "` && \
    vdsm_configure_force
}

vdsm_downgrade() {
    FILES=$(_latest_rpms)
    sudo yum downgrade -y `echo $FILES | paste -sd " "` && \
    vdsm_configure_force
}

vdsm_build() {
    pushd $VDSM_SOURCE_DIR
    ./autogen.sh --system && NOSE_EXCLUDE=.* make rpm
    popd
}

vdsm_build_with_hooks() {
    pushd $VDSM_SOURCE_DIR
    ./autogen.sh --system && ./configure --enable-hooks && make \
    && NOSE_EXCLUDE=.* make rpm
    popd
}

vdsm_build_reinstall() {
    vdsm_build && vdsm_reinstall
}

vdsm_build_reinstall_restart() {
    vdsm_build && vdsm_reinstall && vdsm_restart
}

del_dummies() {
    for dummy in `ip l | awk '{print $2;}' | egrep "^dummy"`; do
        dummy=${dummy%:*}
        dummy=${dummy%@NONE}
        sudo ip link del dev $dummy
    done
    sudo nmcli conn del $(nmcli -f name conn show | grep dummy)
}

del_veths() {
    for veth in `ip l | awk '{print $2;}' | egrep "^veth"`; do
        veth=${veth%:*}
        veth=${veth%@veth*}
        sudo ip link del dev $veth
    done
    sudo nmcli conn del $(nmcli -f name conn show | grep veth)
}

del_bonds() {
    for bond in `ip l | awk '{print $2;}' | egrep "^bond"`; do
        bond=${bond%:*}
        bond=${bond%@NONE}
        echo "-$bond" | sudo tee /sys/class/net/bonding_masters
    done
}

del_bridges() {
    for bridge in `ip -o link show type bridge | awk -F ': ' '{print $2}' | grep test-network`; do
        sudo ip link delete dev $bridge
    done
}

del_ovs_bridges() {
    for bridge in `sudo ovs-vsctl list-br | grep vdsmbr_`; do
        sudo ovs-vsctl del-br $bridge
    done
}

del_test_nets() {
    cat << EOF | sudo $PYTHON -
from __future__ import print_function
from vdsm.common import libvirtconnection
c = libvirtconnection.get()
nets = c.listAllNetworks(0)
for net in nets:
    net_name = net.name()
    if net_name.startswith('vdsm-test-network'):
        net.destroy()
        net.undefine()
        print('net %s removed from libvirt' % net_name)
EOF
}

del_net_persistency() {
cat << EOF | sudo $PYTHON -
import os

dirs = ('/var/lib/vdsm/staging/netconf/nets/',
    '/var/lib/vdsm/staging/netconf/bonds/',
    '/var/lib/vdsm/persistence/netconf/nets/',
    '/var/lib/vdsm/persistence/netconf/bonds/')

for d in dirs:
    if not os.path.exists(d):
        continue

    files = os.listdir(d)
    for f in files:
        full_path = os.path.join(d, f)
        print('removing %s' % full_path)
        os.remove(full_path)

}

emergency_net_cleanup() {
    del_dummies
    del_veths
    del_bonds
    del_bridges
    del_ovs_bridges
    del_test_nets
    del_net_persistency
}

vdsm_flake8() {
    pushd $VDSM_SOURCE_DIR
    ./autogen.sh --system && ./configure && make flake8
    popd
}

vdsm_unit () {
    cd $VDSM_SOURCE_DIR && \
    ./autogen.sh --system && make && make -C tests run_tests_local.sh && \
    cd tests && sudo ./run_tests_local.sh $1
}

log () {
    case $1 in
        vdsm)
        less /var/log/vdsm/vdsm.log
        ;;

        supervdsm)
        less /var/log/vdsm/supervdsm.log
        ;;

        messages)
        sudo less /var/log/messages
        ;;

        sanlock)
        less /var/log/sanlock.log
        ;;
    esac
}
